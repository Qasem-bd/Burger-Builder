{"version":3,"sources":["containers/Orders/Orders.module.css","components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientsOutput","map","ig","className","classes","Ingredients","console","log","Order","price","Orders","this","onFetchOrders","token","userId","toShowOrders","Spinner","loading","orders","id","error","Component","connect","state","auth","idToken","dispatch","actions","withErrorHandler","axios"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,6B,0HC2B9CC,EAzBD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAOF,EACPG,OAASL,EAAMC,YAAYC,KAKnC,IAAMI,EAAoBL,EAAYM,KAAI,SAAAC,GACtC,OAAO,uBACMC,UAAaC,IAAQC,YAD3B,UAC0CH,EAAGJ,KAD7C,MACsDI,EAAGH,OADzD,MAAaG,EAAGJ,SAK3B,OAFAQ,QAAQC,MAGJ,sBAAKJ,UAAaC,IAAQI,MAA1B,UACA,+CAAkBR,EAAlB,OACI,yCAAW,0CAAaN,EAAMe,SAA9B,W,wCCfNC,E,kLAGCC,KAAKjB,MAAMkB,cAAcD,KAAKjB,MAAMmB,MAAOF,KAAKjB,MAAMoB,U,+BAIrD,IAAIC,EAAe,cAACC,EAAA,EAAD,IAanB,OAZKL,KAAKjB,MAAMuB,UACZF,EAAgBJ,KAAKjB,MAAMwB,OAAOjB,KAAI,SAAAR,GAClB,OAAQ,cAACe,EAAD,CAEAb,YAAeF,EAAME,YACrBc,MAAShB,EAAMgB,OAFRhB,EAAM0B,QAK1CR,KAAKjB,MAAM0B,QACVL,EAAe,qDAIf,qBAAKZ,UAAaC,IAAQM,OAA1B,SACKK,Q,GAtBIM,aA2CNC,uBAfS,SAAAC,GACpB,MAAO,CACHL,OAASK,EAAM9B,MAAMyB,OACrBD,QAAUM,EAAM9B,MAAMwB,QACtBG,MAAQG,EAAM9B,MAAM2B,MACpBP,MAAQU,EAAMC,KAAKC,QACnBX,OAAQS,EAAMC,KAAKV,WAGA,SAAAY,GACvB,MAAO,CACHd,cAAgB,SAACC,EAAOC,GAAR,OAAmBY,EAASC,IAAuBd,EAAOC,QAInEQ,CAA4CM,YAAiBlB,EAAOmB","file":"static/js/5.0b566a86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Orders\":\"Orders_Orders__21tR6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1YfkG\",\"Ingredients\":\"Order_Ingredients__3jTFK\"};","import classes from './Order.module.css'\r\nimport React from 'react'\r\n\r\nconst order = (props) => {\r\n    const ingredients = []\r\n    \r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push({\r\n            name : ingredientName,\r\n            amount : props.ingredients[ingredientName]\r\n        });\r\n\r\n    }\r\n\r\n    const ingredientsOutput = ingredients.map(ig => {\r\n        return <span key = {ig.name} \r\n                     className = {classes.Ingredients} >{ig.name} : {ig.amount} </span>\r\n    })\r\n    console.log()\r\n    \r\n    return (\r\n        <div className = {classes.Order}>\r\n        <p>Ingredients : {ingredientsOutput} </p>\r\n            <p>Price : <strong>USD {props.price}</strong> </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default order;","import classes from './Orders.module.css'\r\nimport React,{Component} from 'react'\r\nimport Order from '../../components/Order/Order'\r\nimport axios from '../../axios-orders'\r\nimport withErrorHandler from '../../hoc/withErrorHandler'\r\nimport Spinner from '../../components/UI/Spiner/Spinner'\r\nimport * as actions from '../../store/actions/index'\r\nimport { connect } from \"react-redux\";\r\nclass Orders extends Component {\r\n   \r\n    componentDidMount () {\r\n       this.props.onFetchOrders(this.props.token, this.props.userId)\r\n    }\r\n\r\n    render () {\r\n        let toShowOrders = <Spinner/>\r\n        if (!this.props.loading) {\r\n            toShowOrders =  this.props.orders.map(order => {\r\n                                return (<Order \r\n                                        key = {order.id}\r\n                                        ingredients = {order.ingredients}\r\n                                        price = {order.price} />);\r\n                            })\r\n        }\r\n        if(this.props.error) {\r\n            toShowOrders = <p>Some Thing is Error</p>\r\n        }\r\n\r\n        return (\r\n            <div className = {classes.Orders}>\r\n                {toShowOrders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders : state.order.orders,\r\n        loading : state.order.loading,\r\n        error : state.order.error,\r\n        token : state.auth.idToken,\r\n        userId :state.auth.userId\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders : (token, userId) => dispatch(actions.tryFetchOrders(token, userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders,axios))  ;"],"sourceRoot":""}