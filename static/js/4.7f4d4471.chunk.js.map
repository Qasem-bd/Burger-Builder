{"version":3,"sources":["containers/Auth/auth.module.css","containers/Auth/auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","checkValidity","rules","isValid","trim","maxLength","length","test","isNumeric","inputChangeHandler","event","controlName","updatetControlform","updatedformElement","target","setState","onSubmitHandler","preventDefault","props","onAuth","confirmSignup","prevState","confirmSignin","switchAuthMethodHandler","this","callback","formElementsArray","key","push","config","id","form","map","formElement","changed","invalid","shouldValidate","loading","errorMessage","error","className","classes","ErrorMessage","message","authRedirect","isAuthenticated","price","onBeginCheckout","to","onSubmit","btnType","clicked","Component","connect","auth","idToken","burgerBuilder","totalPrice","dispatch","isSignup","actions","Input","styleClasses","InputElement","validationError","Invalid","ValidationError","inputElement","join","onChange","options","option","displayValue","Label","label"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,aAAe,6B,8JCSrDC,E,4MACFC,MAAQ,CACJC,SAAS,CACLC,MAAM,CACFC,YAAc,QACdC,cAAgB,CACZC,KAAM,QACNC,YAAc,gBAElBC,MAAQ,GACRC,WAAa,CACTC,UAAW,EACXC,SAAQ,GAEZC,OAAQ,EACRC,SAAU,GAEdC,SAAS,CACLV,YAAc,QACdC,cAAgB,CACZC,KAAM,WACNC,YAAc,YAElBC,MAAQ,GACRC,WAAa,CACTC,UAAW,EACXK,UAAW,GAEfH,OAAQ,EACRC,SAAU,IAGlBG,SAAU,M,EAUdC,cAAgB,SAACT,EAAMU,GACnB,IAAIC,GAAU,EAGd,IAAMD,EACJ,OAAO,EAUT,GATIA,EAAMR,WACNS,EAA2B,KAAjBX,EAAMY,QAEhBF,EAAMG,YACNF,EAAWX,EAAMY,OAAOE,QAAUJ,EAAMG,WAAcF,GAEtDD,EAAMH,YACNI,EAAWX,EAAMY,OAAOE,QAAUJ,EAAMH,WAAcI,GAEvDD,EAAMP,QAAS,CAEdQ,EADe,yJACEI,KAAKf,IAAUW,EAEpC,GAAGD,EAAMM,UAAW,CAEhBL,EADgB,QACEI,KAAKf,IAAUW,EAGjC,OAAOA,G,EAIfM,mBAAqB,SAACC,EAAMC,GACxB,IAAIC,EAAkB,eACf,EAAK3B,MAAMC,UAEd2B,EAAkB,eACfD,EAAmBD,IAE1BE,EAAmBrB,MAAQkB,EAAMI,OAAOtB,MAExCqB,EAAmBjB,MAAQ,EAAKK,cAAeY,EAAmBrB,MAAMqB,EAAmBpB,YAG1FoB,EAAmBhB,SAAU,EAE7Be,EAAmBD,GAAeE,EAElC,EAAKE,SAAS,CAAC7B,SAAW0B,K,EAI/BI,gBAAkB,SAACN,GACfA,EAAMO,iBACN,EAAKC,MAAMC,OAAO,EAAKlC,MAAMC,SAASC,MAAMK,MAAM,EAAKP,MAAMC,SAASY,SAASN,MAAM,EAAKP,MAAMe,W,EAEpGoB,cAAgB,WACZ,EAAKL,UAAS,SAAAM,GAAgB,MAAO,CAACrB,UAAW,O,EAErDsB,cAAgB,WACZ,EAAKP,UAAS,SAAAM,GAAgB,MAAO,CAACrB,UAAW,O,EAErDuB,wBAA0B,WACtB,EAAKR,UAAS,SAAAM,GACV,MAAO,CAACrB,UAAWqB,EAAUrB,c,qEAlEjCwB,KAAKT,SAAW,SAAC9B,EAAMwC,O,uEA2EhB,IAAD,OAEFC,EAAoB,GACxB,IAAK,IAAIC,KAAOH,KAAKvC,MAAMC,SACvBwC,EAAkBE,KAAK,CACnBC,OAASL,KAAKvC,MAAMC,SAASyC,GAC7BG,GAAKH,IAIb,IAAII,EACA,8BAEOL,EAAkBM,KAAI,SAAAC,GAChB,OAAQ,cAAC,IAAD,CACO7C,YAAe6C,EAAYJ,OAAOzC,YAClCC,cAAiB4C,EAAYJ,OAAOxC,cACpCG,MAASyC,EAAYJ,OAAOrC,MAC5B0C,QAAW,SAACxB,GAAD,OAAW,EAAKD,mBAAmBC,EAAMuB,EAAYH,KAChEK,SAAaF,EAAYJ,OAAOjC,MAChCwC,eAAkBH,EAAYJ,OAAOpC,WACrCI,QAAWoC,EAAYJ,OAAOhC,SAPvBoC,EAAYH,SAa/CN,KAAKN,MAAMmB,UACXN,EAAO,cAAC,IAAD,KAGX,IAAIO,EAAe,KACfd,KAAKN,MAAMqB,QACXD,EAAe,mBAAGE,UAAaC,IAAQC,aAAxB,SAAwClB,KAAKN,MAAMqB,MAAMI,WAG5E,IAAIC,EAAe,KAWnB,OAVIpB,KAAKN,MAAM2B,kBACRrB,KAAKN,MAAM4B,MAAQ,GAClBtB,KAAKN,MAAM6B,kBACXH,EAAe,cAAC,IAAD,CAAUI,GAAK,eAG9BJ,EAAe,cAAC,IAAD,CAAUI,GAAK,OAMlC,sBAAKR,UAAaC,IAAQzD,KAA1B,UACQ4D,EACHN,EACD,uBAAMW,SAAazB,KAAKR,gBAAxB,UACKe,EACD,cAAC,IAAD,CAAQmB,QAAU,UAAlB,SAA6B1B,KAAKvC,MAAMe,SAAW,UAAY,eAEnE,eAAC,IAAD,CAAQkD,QAAU,SACLC,QAAW3B,KAAKD,wBAD7B,uBACkEC,KAAKvC,MAAMe,SAAW,UAAY,oB,GAxKjGoD,aA+LJC,uBAhBS,SAAApE,GACpB,MAAO,CACHoD,QAAUpD,EAAMqE,KAAKjB,QACrBE,MAAQtD,EAAMqE,KAAKf,MACnBM,gBAAyC,OAAvB5D,EAAMqE,KAAKC,QAC7BT,MAAQ7D,EAAMuE,cAAcC,eAIT,SAAAC,GACvB,MAAO,CACHvC,OAAS,SAAChC,EAAMW,EAAS6D,GAAhB,OAA6BD,EAASE,IAAgBzE,EAAMW,EAAS6D,KAC9EZ,gBAAiB,kBAAMW,EAAUE,WAI1BP,CAA6CrE,I,0ECnJ7C6E,IApDD,SAAC3C,GACZ,IAAM4C,EAAe,CAACrB,IAAQsB,cAC1BC,EAAkB,KAEnB9C,EAAMiB,SAAWjB,EAAMkB,gBAAkBlB,EAAMrB,UAChDiE,EAAalC,KAAKa,IAAQwB,SAC1BD,EAAkB,mBAAGxB,UAAaC,IAAQyB,gBAAxB,0CAGpB,IAAIC,EAAe,KAClB,OAAQjD,EAAM9B,aACV,IAAM,QACF+E,EAAe,+CAAQ3B,UAAasB,EAAaM,KAAK,MAC5BlD,EAAM7B,eADjB,IAEOG,MAAS0B,EAAM1B,MACf6E,SAAYnD,EAAMgB,WACxC,MACJ,IAAM,WACFiC,EAAe,kDAAU3B,UAAasB,EAAaM,KAAK,MAC3BlD,EAAM7B,eADpB,IAEUG,MAAS0B,EAAM1B,MACf6E,SAAYnD,EAAMgB,WAC3C,MACJ,IAAM,SACFiC,EAAe,gDAAQ3B,UAAasB,EAAaM,KAAK,MACtBlD,EAAM7B,eADvB,IAEaG,MAAS0B,EAAM1B,MACf6E,SAAYnD,EAAMgB,QAH/B,SAImBhB,EAAM7B,cAAciF,QAAQtC,KAAI,SAAAuC,GAC9B,OAAO,wBAA6B/E,MAAS+E,EAAO/E,MAA7C,SACG+E,EAAOC,cADKD,EAAO/E,aAMjE,MACJ,QACA2E,EAAe,+CAAO3B,UAAasB,EAAaM,KAAK,MAC5BlD,EAAM7B,eADhB,IAEMG,MAAS0B,EAAM1B,MACf6E,SAAYnD,EAAMgB,WAG3C,OACI,sBAAKM,UAAaC,IAAQoB,MAA1B,UACI,uBAAOrB,UAAaC,IAAQgC,MAA5B,SAAoCvD,EAAMwD,QACzCP,EACAH,O,mBChDblF,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,gBAAkB","file":"static/js/4.7f4d4471.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"auth_Auth__24ziT\",\"ErrorMessage\":\"auth_ErrorMessage__2hZ6h\"};","import classes from './auth.module.css'\r\nimport React, {Component} from 'react'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport * as actions from '../../store/actions/index'\r\nimport { connect, Connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spiner/Spinner'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls:{\r\n            email:{\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'email',\r\n                    placeholder : 'Mail Address'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail:true\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            },\r\n            password:{\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'password',\r\n                    placeholder : 'Password'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength: 7\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            }\r\n        },\r\n        isSignUp: null\r\n    }\r\n    componentWillUnmount() {\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state,callback)=>{\r\n            return;\r\n        };\r\n    }\r\n\r\n    // Check if The form values match to The Rules on Form\r\n    checkValidity = (value,rules) => {\r\n        let isValid = false\r\n    \r\n        // rules is null by selection\r\n        if (! rules)\r\n          return true\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '';\r\n        }\r\n        if (rules.maxLength){\r\n            isValid = (value.trim().length <= rules.maxLength) && isValid\r\n        }\r\n        if (rules.minLength) {\r\n            isValid = (value.trim().length >= rules.minLength) && isValid\r\n        }\r\n        if(rules.isEmail) {\r\n            const patter = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            isValid = patter.test(value) && isValid;\r\n        }\r\n        if(rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid;\r\n        }\r\n             \r\n            return isValid;\r\n    }\r\n\r\n    // Function to handle the inputValue of The FormInputElement and store the result in the State\r\n    inputChangeHandler = (event,controlName ) => {\r\n        let updatetControlform = {\r\n            ...this.state.controls\r\n        }\r\n        let updatedformElement = {\r\n            ...updatetControlform[controlName]\r\n        }\r\n        updatedformElement.value = event.target.value;\r\n        \r\n        updatedformElement.valid = this.checkValidity( updatedformElement.value,updatedformElement.validation);\r\n\r\n         // true wehn we write something     \r\n         updatedformElement.touched = true;\r\n         //Check the validation for the Form complete \r\n         updatetControlform[controlName] = updatedformElement;\r\n\r\n         this.setState({controls : updatetControlform})\r\n\r\n    }\r\n    // Apply on Submitting The Form\r\n    onSubmitHandler = (event) => {\r\n        event.preventDefault()\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp)\r\n    }\r\n    confirmSignup = () => {\r\n        this.setState(prevState =>  { return {isSignUp : true}})\r\n    }\r\n    confirmSignin = () => {\r\n        this.setState(prevState =>  { return {isSignUp : false}})\r\n    }\r\n    switchAuthMethodHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        })\r\n    }\r\n\r\n    // Start Ckeckout after Successfully login\r\n    goToCheckout () {\r\n\r\n    }\r\n\r\n    render () {\r\n\r\n        let formElementsArray = []\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                config : this.state.controls[key],\r\n                id : key\r\n            });\r\n        }\r\n        // Create The Form InputElements\r\n        let form = (\r\n            <div>\r\n                {\r\n                   formElementsArray.map(formElement => {\r\n                         return  <Input key = {formElement.id}\r\n                                        elementType = {formElement.config.elementType}\r\n                                        elementConfig = {formElement.config.elementConfig}\r\n                                        value = {formElement.config.value}\r\n                                        changed = {(event) => this.inputChangeHandler(event,formElement.id)}\r\n                                        invalid = { !formElement.config.valid}\r\n                                        shouldValidate = {formElement.config.validation}\r\n                                        touched = {formElement.config.touched}/>\r\n                        }) \r\n                }\r\n            </div>\r\n        );\r\n        // Displaying The Spinner While Loading\r\n        if (this.props.loading) {\r\n            form = <Spinner/>\r\n        }\r\n        // Displaying ErrorMessage when a Error hapens\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <p className = {classes.ErrorMessage} >{this.props.error.message}</p>\r\n        }\r\n        // Redirecting  after successfully Logging-in [BurgerBuilder -> Authentication -> Checkout || Authentication -> BurgerBuilder]\r\n        let authRedirect = null\r\n        if (this.props.isAuthenticated) {\r\n            if(this.props.price > 4) {\r\n                this.props.onBeginCheckout();\r\n                authRedirect = <Redirect to = \"/checkout\" />\r\n            }\r\n            else {\r\n                authRedirect = <Redirect to = \"/\" />\r\n            }\r\n        }\r\n\r\n        return (\r\n         \r\n            <div className = {classes.Auth}>\r\n                   {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit = { this.onSubmitHandler}>\r\n                    {form}\r\n                    <Button btnType = 'Success'>{this.state.isSignUp ? 'Sign-up' : 'Sign-in' }</Button>\r\n                </form>\r\n                <Button btnType = 'Danger'\r\n                             clicked = {this.switchAuthMethodHandler} >SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP' }</Button>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading : state.auth.loading,\r\n        error : state.auth.error,\r\n        isAuthenticated : state.auth.idToken !== null,\r\n        price : state.burgerBuilder.totalPrice\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth : (email,password,isSignup) => dispatch(actions.tryAuth(email,password,isSignup)),\r\n        onBeginCheckout: () => dispatch (actions.checkoutStart())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps) (Auth);","import React from 'react'\r\nimport classes from './Input.module.css'\r\nconst Input = (props) => {\r\n   const styleClasses = [classes.InputElement]\r\n   let validationError = null;\r\n   //Checking The valida\r\n   if(props.invalid && props.shouldValidate && props.touched) {\r\n     styleClasses.push(classes.Invalid);\r\n     validationError = <p className = {classes.ValidationError}>Please enter a valid value!</p>;\r\n   }\r\n    \r\n   let inputElement = null\r\n    switch (props.elementType) {\r\n        case ('input') :\r\n            inputElement = <input  className = {styleClasses.join(' ')} \r\n                                  {...props.elementConfig}\r\n                                  value = {props.value}\r\n                                  onChange = {props.changed}/>\r\n            break;\r\n        case ('textarea') :\r\n            inputElement = <textarea className = {styleClasses.join(' ')}\r\n                                     {...props.elementConfig}\r\n                                     value = {props.value}\r\n                                     onChange = {props.changed}/>\r\n            break;\r\n        case ('select') :\r\n            inputElement = <select className = {styleClasses.join(' ')}\r\n                                        {...props.elementConfig}\r\n                                        value = {props.value}\r\n                                        onChange = {props.changed}>\r\n                                             {props.elementConfig.options.map(option => {\r\n                                                return <option key = {option.value} value = {option.value}>\r\n                                                         {option.displayValue}\r\n                                                      </option>\r\n                                            })}\r\n                                        </select>\r\n\r\n            break;\r\n        default :\r\n        inputElement = <input className = {styleClasses.join(' ')}\r\n                             {...props.elementConfig}\r\n                             value = {props.value}\r\n                             onChange = {props.changed} />\r\n    }\r\n\r\n    return (\r\n        <div className = {classes.Input}>\r\n            <label className = {classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input ;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__14T5G\",\"Label\":\"Input_Label__1uCkF\",\"InputElement\":\"Input_InputElement__32QFW\",\"Invalid\":\"Input_Invalid__1GikQ\",\"ValidationError\":\"Input_ValidationError__2Kba2\"};"],"sourceRoot":""}