{"version":3,"sources":["components/Order/CkeckoutSummery/CheckoutSummery.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CkeckoutSummery/CheckoutSummery.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","checkoutSummery","props","className","classes","CheckoutSummery","Burger","ingriedents","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","isEmail","street","postalCode","maxLength","minLength","isNumeric","country","deliveryMethod","options","displayValue","isFormValid","orderHandler","event","preventDefault","formData","formElementIdentifier","toPurchaseOrder","ingredients","ings","price","orderData","userId","onOrderBurger","token","checkValidity","rules","isValid","trim","length","test","inputChangeHandler","identifier","updatedOrderForm","updatedFormElement","target","formElement","setState","formElementsArray","key","this","push","config","id","form","onSubmit","map","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","order","auth","idToken","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelHandler","onCheckoutCancel","history","goBack","checkoutContinueHandler","replace","summery","to","checkoutRedirect","checkoutStart","path","match","component","styleClasses","InputElement","validationError","Invalid","ValidationError","inputElement","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.e3e9a482.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummery\":\"CheckoutSummery_CheckoutSummery__3JFuf\",\"Burger\":\"CheckoutSummery_Burger__2MtsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__26_UL\",\"Input\":\"ContactData_Input__3lL8I\"};","import classes from './CheckoutSummery.module.css'\r\nimport React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\n\r\n\r\nconst checkoutSummery = (props) => {\r\n\r\n    return (\r\n        <div className = {classes.CheckoutSummery}>\r\n            <h1>We hope it tasts well !!</h1>\r\n            <div className = {classes.Burger}>\r\n                <Burger ingriedents = {props.ingriedents}/>\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    btnType = 'Danger'\r\n                    clicked = {props.checkoutCancelled}>CANCEL</Button>\r\n                <Button\r\n                    btnType = 'Success'\r\n                    clicked = {props.checkoutContinued}>COUNTINUE</Button>\r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummery;","import classes from './ContactData.module.css'\r\nimport React,{Component} from 'react'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spiner/Spinner'\r\nimport {withRouter} from 'react-router-dom'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport {connect} from 'react-redux'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm : {\r\n            name:{\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'text',\r\n                    placeholder : 'Your Name'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            },\r\n            email:{\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'text',\r\n                    placeholder : 'Your E-Mail'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    isEmail:true\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            },\r\n            street : {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'text',\r\n                    placeholder : 'Street'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            } ,\r\n            postalCode: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'text',\r\n                    placeholder : 'PostalCode'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true,\r\n                    maxLength: 5,\r\n                    minLength: 5,\r\n                    isNumeric:true\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            } ,\r\n            country: {\r\n                elementType : 'input',\r\n                elementConfig : {\r\n                    type: 'text',\r\n                    placeholder : 'Country'\r\n                },\r\n                value : '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid : false,\r\n                touched : false\r\n            }  ,\r\n            deliveryMethod: {\r\n                elementType : 'select',\r\n                elementConfig : {\r\n                    options : [\r\n                        {value : 'fastest', displayValue: 'Fastest'},\r\n                        {value : 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value : 'fastest',\r\n                valid : true\r\n            } \r\n        },\r\n      \r\n        isFormValid: false\r\n    }\r\n\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n               \r\n        const formData = {}\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\r\n        }\r\n         \r\n        const toPurchaseOrder = {\r\n            ingredients : this.props.ings,\r\n            price : this.props.price,\r\n            orderData: formData,\r\n            userId :this.props.userId\r\n        }\r\n        this.props.onOrderBurger( toPurchaseOrder, this.props.token);\r\n\r\n    }\r\n    \r\n    checkValidity = (value,rules) => {\r\n        let isValid = false\r\n    \r\n        // rules is null by selection\r\n        if (! rules)\r\n          return true\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '';\r\n        }\r\n        if (rules.maxLength){\r\n            isValid = (value.trim().length <= rules.maxLength) && isValid\r\n        }\r\n        if (rules.minLength) {\r\n            isValid = (value.trim().length >= rules.minLength) && isValid\r\n        }\r\n        if(rules.isEmail) {\r\n            const patter = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            isValid = patter.test(value) && isValid;\r\n        }\r\n        if(rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid;\r\n        }\r\n             \r\n            return isValid;\r\n    }\r\n\r\n    inputChangeHandler = (event,identifier) => {\r\n        \r\n        const updatedOrderForm = {...this.state.orderForm}\r\n\r\n        const updatedFormElement = {\r\n                     ...updatedOrderForm[identifier]\r\n                  }\r\n\r\n        updatedFormElement.value = event.target.value;\r\n        //check if the value of formElement is valid or not, and store the result in the valid property\r\n        updatedFormElement.valid =  this.checkValidity(updatedFormElement.value,updatedFormElement.validation)\r\n        // true wehn we write something     \r\n        updatedFormElement.touched = true;\r\n        //Check the validation for the Form complete \r\n        updatedOrderForm[identifier] = updatedFormElement;\r\n\r\n        let isFormValid = true\r\n        for (let formElement in updatedOrderForm) {\r\n            isFormValid = updatedOrderForm[formElement].valid && isFormValid\r\n        }\r\n        this.setState({orderForm : updatedOrderForm,isFormValid : isFormValid })\r\n\r\n    }\r\n\r\n    render () {\r\n        let formElementsArray = []\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                config : this.state.orderForm[key],\r\n                id : key\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit = {this.orderHandler}>\r\n                {\r\n                   formElementsArray.map(formElement => {\r\n                         return  <Input key = {formElement.id}\r\n                                        elementType = {formElement.config.elementType}\r\n                                        elementConfig = {formElement.config.elementConfig}\r\n                                        value = {formElement.config.value}\r\n                                        changed = {(event) => this.inputChangeHandler(event,formElement.id)}\r\n                                        invalid = { !formElement.config.valid}\r\n                                        shouldValidate = {formElement.config.validation}\r\n                                        touched = {formElement.config.touched}/>\r\n                        }) \r\n                }\r\n                <Button disabled = {!this.state.isFormValid} btnType = 'Success' >ORDER</Button>\r\n            </form>\r\n       \r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner/>\r\n        }\r\n        \r\n        return (\r\n            <div className = {classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings : state.burgerBuilder.ingredients,\r\n        price : state.burgerBuilder.totalPrice,\r\n        loading : state.order.loading,\r\n        token : state.auth.idToken,\r\n        userId : state.auth.userId\r\n    }\r\n}\r\nconst mapDispatchtoProps = dispatch => {\r\n    return {\r\n        onOrderBurger : (orderData, token) => dispatch(actions.tryPurchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchtoProps) (withErrorHandler (ContactData ,axios)) ;","import './Checkout.module.css';\r\nimport React, { Component } from 'react';\r\nimport {Route,Redirect} from 'react-router-dom';\r\nimport CheckoutSummery from '../../components/Order/CkeckoutSummery/CheckoutSummery';\r\nimport ContactData from '../../containers/Checkout/ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nclass Checkout extends Component {\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.props.onCheckoutCancel();\r\n    }\r\n\r\n    checkoutCancelHandler = () => {\r\n        this.props.onCheckoutCancel();\r\n        this.props.history.goBack();\r\n       \r\n    }\r\n    checkoutContinueHandler = () => {\r\n        \r\n        \r\n        this.props.history.replace('/checkout/contact-data')\r\n    }\r\n\r\n   render () {\r\n       let summery = <Redirect to = \"/\"/>\r\n       if (this.props.ings) {\r\n           let checkoutRedirect = (!this.props.checkoutStart) ? <Redirect to = \"/\"/> : null\r\n           summery =          \r\n             <div>\r\n                 {checkoutRedirect}\r\n                <CheckoutSummery \r\n                        ingriedents = {this.props.ings}\r\n                        checkoutCancelled= {this.checkoutCancelHandler}\r\n                        checkoutContinued = {this.checkoutContinueHandler} />\r\n                <Route path = {this.props.match.path + '/contact-data'} \r\n                        component = {ContactData}/>\r\n             </div>\r\n       }\r\n       return summery;\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings : state.burgerBuilder.ingredients,\r\n        checkoutStart : state.order.checkoutStart\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onCheckoutCancel : () => dispatch(actions.checkoutCancel())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Checkout) ;","import React from 'react'\r\nimport classes from './Input.module.css'\r\nconst Input = (props) => {\r\n   const styleClasses = [classes.InputElement]\r\n   let validationError = null;\r\n   //Checking The valida\r\n   if(props.invalid && props.shouldValidate && props.touched) {\r\n     styleClasses.push(classes.Invalid);\r\n     validationError = <p className = {classes.ValidationError}>Please enter a valid value!</p>;\r\n   }\r\n    \r\n   let inputElement = null\r\n    switch (props.elementType) {\r\n        case ('input') :\r\n            inputElement = <input  className = {styleClasses.join(' ')} \r\n                                  {...props.elementConfig}\r\n                                  value = {props.value}\r\n                                  onChange = {props.changed}/>\r\n            break;\r\n        case ('textarea') :\r\n            inputElement = <textarea className = {styleClasses.join(' ')}\r\n                                     {...props.elementConfig}\r\n                                     value = {props.value}\r\n                                     onChange = {props.changed}/>\r\n            break;\r\n        case ('select') :\r\n            inputElement = <select className = {styleClasses.join(' ')}\r\n                                        {...props.elementConfig}\r\n                                        value = {props.value}\r\n                                        onChange = {props.changed}>\r\n                                             {props.elementConfig.options.map(option => {\r\n                                                return <option key = {option.value} value = {option.value}>\r\n                                                         {option.displayValue}\r\n                                                      </option>\r\n                                            })}\r\n                                        </select>\r\n\r\n            break;\r\n        default :\r\n        inputElement = <input className = {styleClasses.join(' ')}\r\n                             {...props.elementConfig}\r\n                             value = {props.value}\r\n                             onChange = {props.changed} />\r\n    }\r\n\r\n    return (\r\n        <div className = {classes.Input}>\r\n            <label className = {classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input ;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__14T5G\",\"Label\":\"Input_Label__1uCkF\",\"InputElement\":\"Input_InputElement__32QFW\",\"Invalid\":\"Input_Invalid__1GikQ\",\"ValidationError\":\"Input_ValidationError__2Kba2\"};"],"sourceRoot":""}